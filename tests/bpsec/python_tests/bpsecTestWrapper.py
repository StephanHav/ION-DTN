# Draft Test Wrapper

from tests import testUtils
from tests import testCases


def main():

    # Track the total number of tests passed and failed
    testUtils.g_tests_passed = 0
    testUtils.g_tests_failed = 0

     # Clean up ION from previous runs and start the three test nodes with ION running
    # 1. Any remaining ION logs and/or processes are cleaned up from previous runs. 
    # 2. The set of three nodes needed for testing (ipn:2.1, ipn:3.1, and ipn:4.1) are configured and started. 
    # 3. bpsink is run on node ipn:3.1 and ipn:4.1 with the results generated by the bptrace command being 
    #    written to 3_results.txt and 4_results.txt
    testUtils.clean_ion()
    testUtils.node_setup()

    # Test settings for output
    testUtils.g_verbose = "verbose"
    testUtils.g_debug = False

    ########################## ION Test Security Context Tests ############################

    testCases.test1(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)
    
    testCases.test2(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)
    
    testCases.test3(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)
    
    testCases.test4(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)
   
    testCases.test5(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)
    
    testCases.test6(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)

    testCases.test7(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    testCases.test8(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)

    #skip test 9/10 - sha and aes variants

    testCases.test11(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    testCases.test12(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)

    # 13-16 not implemented

    # skip tests 16-20 - key misconfigurations

    testCases.test21(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    # skip tests 22 and 23 as it needs to catch a security context misconfiguration, but the
    # ION Test Security Context handles both bib-integrity and bcb-confidentiality 
    # security operations and would cause unexpected behavior

    testCases.test24(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)

    testCases.test25(inputBcbScId=testUtils.ION_TEST_SCID, inputBibScId=testUtils.ION_TEST_SCID, inputBcbScParams=testUtils.bcbScParms, inputBibScParams=testUtils.bibScParms)

    testCases.test26(inputBcbScId=testUtils.ION_TEST_SCID, inputBibScId=testUtils.ION_TEST_SCID, inputBcbScParams=testUtils.bcbScParms, inputBibScParams=testUtils.bibScParms)

    testCases.test27(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    testCases.test28(inputBcbScId=testUtils.ION_TEST_SCID, inputBibScId=testUtils.ION_TEST_SCID, inputBcbScParams=testUtils.bcbScParms, inputBibScParams=testUtils.bibScParms)

    testCases.test29(inputBcbScId=testUtils.ION_TEST_SCID, inputBibScId=testUtils.ION_TEST_SCID, inputBcbScParams=testUtils.bcbScParms, inputBibScParams=testUtils.bibScParms)

    # skip test 30 as the ION Test SC does not secure extension blocks

    testCases.test31(inputBcbScId=testUtils.ION_TEST_SCID, inputBibScId=testUtils.ION_TEST_SCID, inputBcbScParams=testUtils.bcbScParms, inputBibScParams=testUtils.bibScParms)

    # skip test 32 as the ION Test SC does not secure extension blocks

    testCases.test33(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    # skip test 34 as the ION Test SC does not secure extension blocks

    # tests 35 and 36 not implemented

    testCases.test37(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    testCases.test38(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bibScParms)

    testCases.test39(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)

    testCases.test40()

    testCases.test41()

    # skip tests 42 and 43 as the ION Test SC does not secure extension blocks

    testCases.test44(inputScId=testUtils.ION_TEST_SCID, inputScParams=testUtils.bcbScParms)


    ################################### BIB tests #########################################
    # BIB-HMAC-SHA2 parameters
    sha_variant = [5, 6, 7]
    scope_flags =[1, 2, 4, 7] #1, 2, and 4 are options and 7 is all three options selected
    # TODO: wrapped_key

    # Baseline tests with just the ION Test Suite
    testCases.test1()
    testCases.test3()
    
    # Test using BIB-HMAC-SHA2 with a variety of sha_variant and scope_flag combinations
    # TODO: print info: test1, using scid 1 and parameters x

    for variant in sha_variant:

        # BIB targeting the Primary Block
        # Note that scope_flags MUST be set to 4: Include security header flag
        testCases.test3(inputScId=testUtils.BIB_HMAC_SHA2_SCID, inputScParams=[["key_name", "key_1_32bytes"], ["sha_variant", str(variant)], ["scope_flags", "4"]])
   
    for variant in sha_variant:
        for scope in scope_flags:

            # BIB targeting the Payload Block
            testCases.test1(inputScId=testUtils.BIB_HMAC_SHA2_SCID, inputScParams=[["key_name", "key_1_32bytes"], ["sha_variant", str(variant)], ["scope_flags", str(scope)]])

            # BIB targeting an extension block (the Bundle Age Block)
            testCases.test42(inputScId=testUtils.BIB_HMAC_SHA2_SCID, inputScParams=[["key_name", "key_1_32bytes"], ["sha_variant", str(variant)], ["scope_flags", str(scope)]])

    
    ################################### BCB tests #########################################
    # BCB-AES_GCM parameters
    aes_variant = [1, 3]
    scope_flags =[1, 2, 4, 7] #1, 2, and 4 are options and 7 is all three options selected
    # TODO: wrapped_key
    # TODO: IV

    # Baseline test with just the ION Test Suite
    testCases.test2()
 
    # Test using BCB-AES-GCM with a variety of sha_variant and scope_flag combinations
    # TODO: print info: test2, using scid 2 and parameters x

    for variant in aes_variant:
        for scope in scope_flags:

            # BCB targeting the Payload Block
            testCases.test2(inputScId=testUtils.BCB_AES_GCM_SCID, inputScParams=[["key_name", "bcb_key_32bytes"], ["aes_variant", str(variant)], ["aad_scope", str(scope)]])

            # BCB targeting an extension block (the Bundle Age Block)
            testCases.test43(inputScId=testUtils.BCB_AES_GCM_SCID, inputScParams=[["key_name", "bcb_key_32bytes"], ["aes_variant", str(variant)], ["aad_scope", str(scope)]])

    testUtils.stop_and_clean()

    #TODO: Add test summary
    
    print("\n###############################################################################")
    print("Test(s) completed.")
    print("\tTest(s) passed: " + str(testUtils.g_tests_passed))
    print("\tTest(s) failed: " + str(testUtils.g_tests_failed))
    print("###############################################################################")

if __name__ == "__main__":
    main()