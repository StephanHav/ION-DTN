=head1 NAME

dgr - Datagram Retransmission system library

=head1 SYNOPSIS

    #include "dgr.h"

    [see description for available functions]

=head1 DESCRIPTION

The dgr library provides functions enabling application software to use
the DGR system to send and receive information reliably over an IP-based
network, using UDP/IP. 

DGR differs from many reliable-UDP systems in two main ways:

	It uses adaptive timeout interval computation techniques
	borrowed from TCP to try to avoid introducing congestion
	into the network.

	It borrows the concurrent-session model of transmission
	from LTP (and ultimately from CFDP), rather than waiting
	for one datagram to be acknowledged before sending the next,
	to improve bandwidth utilization.

=over 4

=item DgrRC dgr_open(unsigned short ownPortNbr, unsigned int ownIpAddress, char *memmgrName, Dgr *dgr)

Establishes the application's access to DGR communication service.

I<ownPortNbr> is the port number to use for DGR service.  If zero, a
system-assigned UDP port number is used.

I<ownIpAddress> is the Internet address of the network interface to use for
DGR service.  If zero, this argument defaults to the address of the interface
identified by the local machine's host name.

I<memmgrName> is the name of the memory manager (see memmgr(3)) to use for
dynamic memory management in DGR.  If NULL, defaults to the standard
system malloc() and free() functions.

I<dgr> is the location in which to store the service access pointer that must
be supplied on subsequent DGR function invocations.

On any error, returns DgrFailed; check errno for the nature of the error.

=item void dgr_getsockname(Dgr dgr, unsigned short *portNbr, unsigned int *ipAddress)

States the port number and IP address of the UDP socket used for this DGR
service access point.

=item void dgr_close(Dgr dgr)

Reverses dgr_open(), releasing resources where possible.

=item DgrRC dgr_send(Dgr dgr, unsigned short toPortNbr, unsigned int toIpAddress, int notificationFlags, char *content, int length)

Sends the indicated content, of length as indicated, to the remote DGR
service access point identified by I<toPortNbr> and I<toIpAddress>.  The
message will be retransmitted as necessary until either it is acknowledged or
DGR determines that it cannot be delivered.

I<notificationFlags>, if non-zero, is the logical OR of the notification
behaviors requested for this datagram.  Available behaviors are DGR_NOTE_FAILED
(a notice of datagram delivery failure will issued if delivery of the
datagram fails) and DGR_NOTE_ACKED (a notice of datagram delivery success
will be issued if delivery of the datagram succeeds).  Notices are issued
via dgr_receive() that is, the thread that calls dgr_receive() on this DGR
service access point will receive these notices interspersed with inbound
datagram contents.

I<length> of content must be greater than zero and may be as great
as 65535, but lengths greater than 8192 may not be supported by the local
underlying UDP implementation; to minimize the chance of data loss when
transmitting over the internet, length should not exceed 512.

On any error, returns DgrFailed; check errno for the nature of the error.

=item DgrRC dgr_receive(Dgr dgr, unsigned short *fromPortNbr, unsigned int *fromIpAddress, char *content, int *length, int *errnbr, int timeoutSeconds)

Delivers the oldest undelivered DGR event queued for delivery.

DGR events are of two type: (a) messages received from a remote DGR
service access point and (b) notices of previously sent messages that
DGR has determined either have been or cannot be delivered, as requested
in the I<notificationFlags> parameters provided to the dgr_send() calls
that sent those messages.

In the former case, dgr_receive() will place the content of the inbound
message in I<content>, its length in I<length>, and the IP address and port
number of the sender in I<fromIpAddress> and I<fromPortNbr>, and it will
return DgrDatagramReceived.

In the latter case, dgr_receive() will place the content of the affected
B<outbound> message in I<content> and its length in I<length>, will place
the relevant errno (if any) in I<errnbr>, and will return either
DgrDatagramAcknowledged or DgrDatagramNotAcknowledged.

The I<content> buffer should be at least 65535 bytes in length to enable
delivery of the content of the received or delivered/undeliverable message.

I<timeoutSeconds> controls blocking behavior.  If I<timeoutSeconds>
is DGR_BLOCKING (i.e., -1), dgr_receive() will not return until (a) there
is either an inbound message to deliver or an outbound message delivery
result to report, or (b) the function is interrupted by means of
dgr_interrupt().  If I<timeoutSeconds> is DGR_POLL (i.e., zero),
dgr_receive() returns immediately; if there is currently no
inbound message to deliver and no outbound message
delivery result to report, the function returns DgrTimedOut.
For any other positive value of I<timeoutSeconds>, dgr_receive() returns
after the indicated number of seconds have lapsed (in which case the
return value is DgrTimedOut), or when there is a message to deliver
or a delivery result to report, or when the function is interrupted
by means of dgr_interrupt(), whichever occurs first.  When the function
returns due to interruption by dgr_interrupt(), the return value is
DgrInterrupted.

On any I/O error or other unrecoverable system error, returns DgrFailed;
check errno for the nature of the error.

=item void dgr_interrupt(Dgr dgr)

Interrupts a dgr_receive() invocation that is currently blocked.  Designed 
to be called from a signal handler; for this purpose, I<dgr> man need to
be obtained from a static variable.

=back

=head1 SEE ALSO

ltp(3), file2dgr(1), dgr2file(1)
