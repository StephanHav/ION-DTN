/******************************************************************************
 **                           COPYRIGHT NOTICE
 **      (c) 2012 The Johns Hopkins University Applied Physics Laboratory
 **                         All rights reserved.
 **
 **     This material may only be used, modified, or reproduced by or for the
 **       U.S. Government pursuant to the license rights granted under
 **          FAR clause 52.227-14 or DFARS clauses 252.227-7013/7014
 **
 **     For any other permissions, please contact the Legal Office at JHU/APL.
 ******************************************************************************/

/*****************************************************************************
 **
 ** File Name: adm_bp.h
 **
 ** Description: This file contains the definitions of the Bundle Protocol
 **              ADM.
 **
 ** Notes:
 **
 ** Assumptions:
 **      1. We current use a non-official OID root tree for DTN Bundle Protocol
 **         identifiers.
 **
 **
 ** Modification History:
 **  MM/DD/YY  AUTHOR         DESCRIPTION
 **  --------  ------------   ---------------------------------------------
 **  10/22/11  E. Birrane     Initial Implementation.
 **  01/02/13  E. Birrane     Update to latest version of DTNMP. Cleanup.
 *****************************************************************************/

#ifndef ADM_BP_H_
#define ADM_BP_H_

#include "lyst.h"
#include "bpnm.h"

#include "shared/utils/nm_types.h"


#include "shared/adm/adm.h"




/*
 * [3] arrays ar eby classes of service.
 * 0 - BULK
 * 1 - NORM
 * 2 - EXP
 */


/*
 * +--------------------------------------------------------------------------+
 * |						      ADM CONSTANTS  							  +
 * +--------------------------------------------------------------------------+
 */


/*
 * We will invent an OID space for BP MIB information, to live at:
 *
 * iso.identified-organization.dod.internet.mgmt.mib-2.bp.bpMib
 * or 1.2.3.1.2.1.122.1
 * or, as OID,: 2A 03 01 02 01 7A 01
 *
 * From that define bpNodeObjects as 1
 * So, total OID prefix is 2A 03 01 02 01 7A 01 01
 *
 * OMIT SNMP 0x6 type identifier since we know these are always OIDs.
 */

static char* BP_ADM_NICKNAME = "2A030102017A01";


/*
 * +--------------------------------------------------------------------------+
 * |					  ADM ATOMIC DATA DEFINITIONS  						  +
 * +--------------------------------------------------------------------------+
 */

/* BP Managed Atomic Data Items, from:
 * http://tools.ietf.org/id/draft-sims-dtnrg-bpmib-02.txt
 */

/*
 * Structure: Node Info is subtree at 01. Endpoint is subtree at 02. CLA is
 *            subtree at 03.
 *
 *                   ADM_BP_ROOT (2A030102017A01)
 *                        |
 *      NODE_INFO (01)    |    ENDPOINT_INFO (02)    CLA_INFO (03)
 *           +------------+----------+---------------------+
 *           |            |          |                     |
 */

/* Node-Specific Definitions (2A030102017A0101*)
 *
 * bpNodeID - A unique name given to the Node Instance
 * bpBundleVersion - The Bundle Protocol version being used by the managed Node
 * bpAvailStorage - The amount of storage available to the managed Node
 * bpLastUpTime - The last time a Node was restarted
 * bpBulkPriorGenBndls - # locally generated Bundles for BULK priority type.
 * bpNormPriorGenBndls - # locally generated Bundles for NORM priority type.
 * bpExpPriorGenBndls - # locally generated Bundles for EXP priority type.
 * bpBulkPriorGenBytes - # locally generated bytes for BULK priority type.
 * bpNormPriorGenBytes - # locally generated bytes for NORM priority type.
 * bpExpPriorGenBytes - # locally generated bytes for EXP priority type.
 * bpBulkPriorQueuedBndls - # locally queued Bundles for BULK priorty type.
 * bpNormPriorQueuedBndls - # locally queued Bundles for NORM priorty type.
 * bpExpPriorQueuedBndls - # locally queued Bundles for EXP priorty type.
 * bpBulkPriorQueuedBytes - # locally queued bytes for BULK priority type.
 * bpNormPriorQueuedBytes - # locally queued bytes for NORM priority type.
 * bpExpPriorQueuedBytes - # locally queued bytes for EXP priority type.
 * bpReassemblyPendingBndls - # locally queued bundles pending reassembly.
 * bpDispatchPendingBndls - # locally queued bundles pending dispatch.
 * bpForwardPendingBndls - # locally queued bundles pending forward.
 * bpCustodyAcceptedBndls - # locally queued bundles pending custody accept.
 * bpReassemblyPendingBytes - # locally queued bytes pending reassembly.
 * bpDispatchPendingBytes - # locally queued bytes pending dispatch.
 * bpForwardPendingBytes - # locally queued bytes pending forward.
 * bpCustodyAcceptedBytes - # locally queued bytes pending custody accept.
 * bpBundleReceptions - # reports rx for bundle reception.
 * bpBundleAcceptance - # reports rx for bundle acceptance.
 * bpBundleForwarding - # reports rx for bundle forwarding.
 * bpCustodySuccess - # reports rx for custody success.
 * bpBundleDelivery - # reports rx for bundle delivery.
 * bpCustodyFailureBndls - # times bundle custody failed.
 * bpForwardFailureBndls - # times bundle forward failed.
 * bpAbandonedDeliveryBndls - # times delivery abandoned.
 * bpDiscardedBndls - # times bundle discarded.
 * bpFragmentedLocally - # times bundle fragmented.
 * bpDelExpired - # times bundle deleted due to expiration.
 * bpDelTransCancelled - # times bundle deleted due to cancellation.
 * bpDelDepStorage - # times bundle deleted due to no more storage.
 * bpDelDestUnintel - # times bundle deleted due to bad EID.
 * bpDelNoRoute - # times bundle deleted due to no route.
 * bpDelUntimelyContact - # times bundle deleted due to no contact.
 * bpDelBlockUnintel - # times bundle deleted due to bad blocks.
 * bpDelNoAdditionalInfo - # times bundle deleted due to no known reason.
 * bpCustodyFailureBytes - # bytes of custody failed.
 * bpForwardFailureBytes - # bytes of forward failed.
 * bpAbandonedDeliveryBytes - # bytes of delivery abandoned.
 * bpDiscardedBytes - # bytes of bundle discarded.
 * bpFragmentsCreated - # fragments created by the managed node.
 * bpExtBlockType - Type of block supported by the managed node
 * bpExtBlockDisplayName - Names of blocks supported by the managed node.
 */

static char* BP_NODE_ALL      			 = "00092A030102017A010100";
static char* BP_NODE_ID                  = "00092A030102017A010101";
static char *BP_NODE_VER                 = "00092A030102017A010102";
static char *BP_NODE_CUR_RES_CNT_0       = "00092A030102017A010103";
static char *BP_NODE_CUR_RES_CNT_1       = "00092A030102017A010104";
static char *BP_NODE_CUR_RES_CNT_2       = "00092A030102017A010105";
static char *BP_NODE_CUR_RES_BYTES_0     = "00092A030102017A010106";
static char *BP_NODE_CUR_RES_BYTES_1     = "00092A030102017A010107";
static char *BP_NODE_CUR_RES_BYTES_2     = "00092A030102017A010108";
static char *BP_NODE_CUR_IN_LIMBO        = "00092A030102017A010109";
static char *BP_NODE_CUR_DISPATCH_PEND   = "00092A030102017A01010A";
static char *BP_NODE_CUR_FWD_PEND        = "00092A030102017A01010B";
static char *BP_NODE_CUR_REASSEMBLE_PEND = "00092A030102017A01010C";
static char *BP_NODE_CUR_IN_CUSTODY      = "00092A030102017A01010D";
static char *BP_NODE_CUR_NOT_IN_CUSTODY  = "00092A030102017A01010E";
static char *BP_NODE_LAST_RESET_TIME     = "00092A030102017A01010F";
static char *BP_NODE_SRC_CNT_0    		 = "00092A030102017A010110";
static char *BP_NODE_SRC_CNT_1    		 = "00092A030102017A010111";
static char *BP_NODE_SRC_CNT_2    		 = "00092A030102017A010112";
static char *BP_NODE_SRC_BYTES_0  		 = "00092A030102017A010113";
static char *BP_NODE_SRC_BYTES_1  		 = "00092A030102017A010114";
static char *BP_NODE_SRC_BYTES_2  		 = "00092A030102017A010115";
static char *BP_NODE_RX_CNT_0     		 = "00092A030102017A010116";
static char *BP_NODE_RX_CNT_1     		 = "00092A030102017A010117";
static char *BP_NODE_RX_CNT_2     		 = "00092A030102017A010118";
static char *BP_NODE_RX_BYTES_0   		 = "00092A030102017A010119";
static char *BP_NODE_RX_BYTES_1   		 = "00092A030102017A01011A";
static char *BP_NODE_RX_BYTES_2   		 = "00092A030102017A01011B";
static char *BP_NODE_DIS_CNT_0    	     = "00092A030102017A01011C";
static char *BP_NODE_DIS_CNT_1    		 = "00092A030102017A01011D";
static char *BP_NODE_DIS_CNT_2    		 = "00092A030102017A01011E";
static char *BP_NODE_DIS_BYTES_0  		 = "00092A030102017A01011F";
static char *BP_NODE_DIS_BYTES_1  		 = "00092A030102017A010120";
static char *BP_NODE_DIS_BYTES_2  		 = "00092A030102017A010121";
static char *BP_NODE_XMIT_CNT_0   		 = "00092A030102017A010122";
static char *BP_NODE_XMIT_CNT_1   		 = "00092A030102017A010123";
static char *BP_NODE_XMIT_CNT_2   		 = "00092A030102017A010124";
static char *BP_NODE_XMIT_BYTES_0 		 = "00092A030102017A010125";
static char *BP_NODE_XMIT_BYTES_1 		 = "00092A030102017A010126";
static char *BP_NODE_XMIT_BYTES_2 		 = "00092A030102017A010127";
static char *BP_NODE_RPT_RX_CNT          = "00092A030102017A010128";
static char *BP_NODE_RPT_ACCEPT_CNT      = "00092A030102017A010129";
static char *BP_NODE_RPT_FWD_CNT         = "00092A030102017A01012A";
static char *BP_NODE_RPT_DELIVER_CNT     = "00092A030102017A01012B";
static char *BP_NODE_RPT_DELETE_CNT      = "00092A030102017A01012C";
static char *BP_NODE_RPT_NONE_CNT        = "00092A030102017A01012D";
static char *BP_NODE_RPT_EXPIRED_CNT     = "00092A030102017A01012E";
static char *BP_NODE_RPT_FWD_UNIDIR_CNT  = "00092A030102017A01012F";
static char *BP_NODE_RPT_CANCELLED_CNT   = "00092A030102017A010130";
static char *BP_NODE_RPT_DEPLETION_CNT   = "00092A030102017A010131";
static char *BP_NODE_RPT_EID_BAD_CNT     = "00092A030102017A010132";
static char *BP_NODE_RPT_NO_ROUTE_CNT    = "00092A030102017A010133";
static char *BP_NODE_RPT_NO_CONTACT_CNT  = "00092A030102017A010134";
static char *BP_NODE_RPT_BLK_MALFMED_CNT = "00092A030102017A010135";
static char *BP_NODE_CUST_ACC_CNT        = "00092A030102017A010136";
static char *BP_NODE_CUST_ACC_BYTES      = "00092A030102017A010137";
static char *BP_NODE_CUST_REL_CNT        = "00092A030102017A010138";
static char *BP_NODE_CUST_REL_BYTES      = "00092A030102017A010139";
static char *BP_NODE_CUST_EXP_CNT        = "00092A030102017A01013A";
static char *BP_NODE_CUST_EXP_BYTES      = "00092A030102017A01013B";
static char *BP_NODE_CUST_RED_CNT        = "00092A030102017A01013C";
static char *BP_NODE_CUST_RED_BYTES      = "00092A030102017A01013D";
static char *BP_NODE_CUST_DEP_CNT        = "00092A030102017A01013E";
static char *BP_NODE_CUST_DEP_BYTES      = "00092A030102017A01013F";
static char *BP_NODE_CUST_EID_BAD_CNT    = "00092A030102017A010140";
static char *BP_NODE_CUST_EID_BAD_BYTES  = "00092A030102017A010141";
static char *BP_NODE_CUST_NO_ROUTE_CNT   = "00092A030102017A010142";
static char *BP_NODE_CUST_NO_ROUTE_BYTES = "00092A030102017A010143";
static char *BP_NODE_CUST_NO_CTACT_CNT   = "00092A030102017A010144";
static char *BP_NODE_CUST_NO_CTACT_BYTES = "00092A030102017A010145";
static char *BP_NODE_CUST_BLK_MAL_CNT    = "00092A030102017A010146";
static char *BP_NODE_CUST_BLK_MAL_BYTES  = "00092A030102017A010147";
static char *BP_NODE_QUEUED_FWD_CNT      = "00092A030102017A010148";
static char *BP_NODE_QUEUED_FWD_BYTES    = "00092A030102017A010149";
static char *BP_NODE_FWD_OK_CNT          = "00092A030102017A01014A";
static char *BP_NODE_FWD_OK_BYTES        = "00092A030102017A01014B";
static char *BP_NODE_FWD_FAIL_CNT        = "00092A030102017A01014C";
static char *BP_NODE_FWD_FAIL_BYTES      = "00092A030102017A01014D";
static char *BP_NODE_FWD_REQUEUE_CNT     = "00092A030102017A01014E";
static char *BP_NODE_FWD_REQUEUE_BYTES   = "00092A030102017A01014F";
static char *BP_NODE_EXPIRED_CNT   	     = "00092A030102017A010150";
static char *BP_NODE_EXPIRED_BYTES 		 = "00092A030102017A010151";
static char *BP_NODE_ENDPOINT_NAMES      = "00092A030102017A010152";



/* Endpoint-Specific Definitions (2A030102017A0102*)
 *
 * bpRegCount - The number of currently registered Endpoints
 * bpEndpointID - The ID/address of the Endpoint Entry
 * bpCurState - Denotation of the BP's current state for this Endpoint
 * bpIsSingleton - Denotation of whether the Endpoint is a Singleton
 * bpDeliveryFailureAction - Denotation of the Delivery Failure for this Endpoint
 * bpBulkPriorRecvdBndls - # bundles of BULK pri rx at the endpoint.
 * bpNormPriorRecvdBndls - # bundles of NORM pri rx at the endpoint.
 * bpExpPriorRecvdBndls - # bundles of EXP pri rx at the endpoint.
 * bpBundlesDeliveredBndls - # bundles delivered at the endpoint.
 * bpBundlesSentBndls - # bundles send by this endpoint.
 * bpBundlesForwardedBndls - # bundles forwarded by this endpoint.
 * bpDuplicatesBndls - # duplicate bundles received by this endpoint
 * bpBulkPriorRecvdBytes - # bytes of BULK pri rx at the endpoint.
 * bpNormPriorRecvdBytes - # bytes of NORM pri rx at the endpoint.
 * bpExpPriorRecvdBytes - # bytes of EXP pri rx at the endpoint.
 * bpBundlesDeliveredBytes - # bytes delivered at the endpoint.
 * bpBundlesSentBytes - # bytes send by this endpoint.
 * bpBundlesForwardedBytes - # bytes forwarded by this endpoint.
 * bpDuplicatesBytes - # duplicate bytes received by this endpoint.
 * bpDelExpiredReports - # deletion reports due to expiration.
 * bpDelTransCancelledReports - # deletion reports due to cancel.
 * bpDelDepStorageReports - # deletion reports due to storage.
 * bpDelDestUnintelReports - # deletion reports due to bad EID.
 * bpDelNoRouteReports - # deletion reports due to no route.
 * bpDelUntimelyContactReports - # deletion reports due to no contact.
 * bpDelBlockUnintelReports - # deletion reports due to bad block.
 * bpDelNoAdditionalInfoReports - # deletion reports due to no known reason.
 */

static char *BP_ENDPOINT_ALL                  = "40092A030102017A010200";
static char *BP_ENDPOINT_NAME                 = "40092A030102017A010201";
static char *BP_ENDPOINT_CUR_QUEUED_BUNDLES   = "40092A030102017A010202";
static char *BP_ENDPOINT_CUR_QUEUED_BYTES     = "40092A030102017A010203";
static char *BP_ENDPOINT_LAST_RESET_TIME      = "40092A030102017A010204";
static char *BP_ENDPOINT_BUNDLE_QUEUE_COUNT   = "40092A030102017A010205";
static char *BP_ENDPOINT_BUNDLE_QUEUE_BYTES   = "40092A030102017A010206";
static char *BP_ENDPOINT_BUNDLE_DEQUEUE_COUNT = "40092A030102017A010207";
static char *BP_ENDPOINT_BUNDLE_DEQUEUE_BYTES = "40092A030102017A010208";



/* Convergence-Layer-Specific Definitions (2A030102017A0103*) */

/* bpClaCount - The number of known CLAs. */
/* bpClType - Denotation of the CL type. */
/* bpClaDisplayName - Human-readable name for the CLA assigned by the mgmt agent*/
/* bpClID - A unique identifier for a specific CLA's MIB instance. */
/* bpClInBndls - # bundles passed up the protocol stack from this CLA. */
/* bpClOutBndls - # bundles passed down the protocol stack from this CLA. */
/* bpClInBytes - # bytes passed up the protocol stack from this CLA. */
/* bpClOutBytes - # bytes passed down the protocol stack from this CLA. */
/* bpClaDirection - Denotation of CLA's transmission direction. */



/* Bundle Protocol Controls */
static char *BP_NODE_RESET_ALL     = "01092A030102017A010300";
static char *BP_ENDPOINT_RESET_ALL = "41092A030102017A010301";



/* Bundle Protocol Constants */


/* Bundle Protocol Operators */


/*
 * +--------------------------------------------------------------------------+
 * |					        FUNCTION PROTOTYPES  						  +
 * +--------------------------------------------------------------------------+
 */


void initBpAdm();

char *bp_print_node_all(uint8_t* buffer, uint64_t buffer_len, uint64_t data_len, uint32_t *str_len);
char *bp_print_endpoint_all(uint8_t* buffer, uint64_t buffer_len, uint64_t data_len, uint32_t *str_len);

uint8_t *bp_node_get_all(Lyst params, uint64_t *length);
uint8_t *bp_node_get_node_id(Lyst params, uint64_t *length);
uint8_t *bp_node_get_version(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_res_cnt_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_res_cnt_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_res_cnt_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_res_byte_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_res_byte_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_res_byte_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_in_limbo(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_dispatch_pend(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_forward_pend(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_reassemble_pend(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_in_custody(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cur_not_in_custody(Lyst params, uint64_t *length);
uint8_t *bp_node_get_last_reset_time(Lyst params, uint64_t *length);
uint8_t *bp_node_get_src_cnt_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_src_cnt_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_src_cnt_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_src_byte_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_src_byte_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_src_byte_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rx_cnt_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rx_cnt_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rx_cnt_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rx_byte_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rx_byte_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rx_byte_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_dis_cnt_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_dis_cnt_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_dis_cnt_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_dis_byte_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_dis_byte_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_dis_byte_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_xmit_cnt_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_xmit_cnt_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_xmit_cnt_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_xmit_byte_0(Lyst params, uint64_t *length);
uint8_t *bp_node_get_xmit_byte_1(Lyst params, uint64_t *length);
uint8_t *bp_node_get_xmit_byte_2(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_rx_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_accept_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_fwd_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_deliver_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_delete_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_none_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_expired_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_fwd_unidir_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_cancelled_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_depletion_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_eid_bad_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_no_route_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_no_contact_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_rpt_blk_malformed(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_accept_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_accept_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_rel_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_rel_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_exp_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_exp_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_redundant_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_redundant_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_depletion_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_depletion_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_eid_bad_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_eid_bad_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_no_route_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_no_route_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_no_contact_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_no_contact_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_blk_mal_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_cust_blk_mal_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_queued_fwd_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_queued_fwd_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_fwd_ok_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_fwd_ok_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_fwd_fail_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_fwd_fail_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_fwd_requeue_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_fwd_requeue_byte(Lyst params, uint64_t *length);
uint8_t *bp_node_get_expired_cnt(Lyst params, uint64_t *length);
uint8_t *bp_node_get_expired_byte(Lyst params, uint64_t *length);


uint8_t *bp_endpoint_get_names(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_all(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_name(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_cur_queued_bndls(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_cur_queued_byte(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_last_reset_time(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_bundle_queue_cnt(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_bundle_queue_byte(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_bundle_dequeue_cnt(Lyst params, uint64_t *length);
uint8_t *bp_endpoint_get_bundle_dequeue_byte(Lyst params, uint64_t *length);



/* Size Functions. */
uint32_t bp_size_node_all(uint8_t* buffer, uint64_t buffer_len);

uint32_t bp_size_endpoint_all(uint8_t* buffer, uint64_t buffer_len);

uint32_t bp_size_node_id(uint8_t* buffer, uint64_t buffer_len);
uint32_t bp_size_node_version(uint8_t* buffer, uint64_t buffer_len);


/* Controls */

uint32_t bp_ctrl_reset(Lyst params);
uint32_t bp_ctrl_endpoint_reset(Lyst params);

#endif //ADM_BP_H_
